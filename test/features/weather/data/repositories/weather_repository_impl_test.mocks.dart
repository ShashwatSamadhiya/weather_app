// Mocks generated by Mockito 5.4.6 from annotations
// in weather_app/test/features/weather/data/repositories/weather_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/weather_app.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCurrentWeatherData_0 extends _i1.SmartFake
    implements _i2.CurrentWeatherData {
  _FakeCurrentWeatherData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeeklyWeatherData_1 extends _i1.SmartFake
    implements _i2.WeeklyWeatherData {
  _FakeWeeklyWeatherData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteDataSource extends _i1.Mock
    implements _i2.WeatherRemoteDataSource {
  MockWeatherRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.CurrentWeatherData> getCurrentWeatherData(
          _i2.PositionCoordinates? position) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentWeatherData,
          [position],
        ),
        returnValue:
            _i3.Future<_i2.CurrentWeatherData>.value(_FakeCurrentWeatherData_0(
          this,
          Invocation.method(
            #getCurrentWeatherData,
            [position],
          ),
        )),
      ) as _i3.Future<_i2.CurrentWeatherData>);

  @override
  _i3.Future<_i2.CurrentWeatherData> getCityWeatherData(String? cityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCityWeatherData,
          [cityName],
        ),
        returnValue:
            _i3.Future<_i2.CurrentWeatherData>.value(_FakeCurrentWeatherData_0(
          this,
          Invocation.method(
            #getCityWeatherData,
            [cityName],
          ),
        )),
      ) as _i3.Future<_i2.CurrentWeatherData>);

  @override
  _i3.Future<_i2.WeeklyWeatherData> getWeeklyWeather(
          _i2.PositionCoordinates? position) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeeklyWeather,
          [position],
        ),
        returnValue:
            _i3.Future<_i2.WeeklyWeatherData>.value(_FakeWeeklyWeatherData_1(
          this,
          Invocation.method(
            #getWeeklyWeather,
            [position],
          ),
        )),
      ) as _i3.Future<_i2.WeeklyWeatherData>);
}

/// A class which mocks [WeatherLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherLocalDataSource extends _i1.Mock
    implements _i2.WeatherLocalDataSource {
  MockWeatherLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> cacheCurrentWeather(
    _i2.PositionCoordinates? position,
    _i2.CurrentWeatherData? weatherData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheCurrentWeather,
          [
            position,
            weatherData,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cacheCityWeather(
    String? cityName,
    _i2.CurrentWeatherData? weatherData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheCityWeather,
          [
            cityName,
            weatherData,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cacheWeeklyWeather(
    _i2.PositionCoordinates? position,
    _i2.WeeklyWeatherData? weatherData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheWeeklyWeather,
          [
            position,
            weatherData,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i2.CurrentWeatherData?> getLastCurrentWeather(
          _i2.PositionCoordinates? position) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastCurrentWeather,
          [position],
        ),
        returnValue: _i3.Future<_i2.CurrentWeatherData?>.value(),
      ) as _i3.Future<_i2.CurrentWeatherData?>);

  @override
  _i3.Future<_i2.CurrentWeatherData?> getLastCityWeather(String? cityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastCityWeather,
          [cityName],
        ),
        returnValue: _i3.Future<_i2.CurrentWeatherData?>.value(),
      ) as _i3.Future<_i2.CurrentWeatherData?>);

  @override
  _i3.Future<_i2.WeeklyWeatherData?> getLastWeeklyWeather(
          _i2.PositionCoordinates? position) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastWeeklyWeather,
          [position],
        ),
        returnValue: _i3.Future<_i2.WeeklyWeatherData?>.value(),
      ) as _i3.Future<_i2.WeeklyWeatherData?>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i2.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
