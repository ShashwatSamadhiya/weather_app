// Mocks generated by Mockito 5.4.6 from annotations
// in weather_app/test/features/weather/data/datasources/weather_remotesource_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:weather_app/weather_app.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePositionCoordinates_2 extends _i1.SmartFake
    implements _i4.PositionCoordinates {
  _FakePositionCoordinates_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i4.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Response> getRequest(_i4.APIRouteData? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequest,
          [route],
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #getRequest,
            [route],
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> postRequest(_i4.APIRouteData? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #postRequest,
          [route],
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #postRequest,
            [route],
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> putRequest(_i4.APIRouteData? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #putRequest,
          [route],
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #putRequest,
            [route],
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> deleteRequest(_i4.APIRouteData? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRequest,
          [route],
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #deleteRequest,
            [route],
          ),
        )),
      ) as _i5.Future<_i2.Response>);
}

/// A class which mocks [WeatherAppApiHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherAppApiHelper extends _i1.Mock
    implements _i4.WeatherAppApiHelper {
  MockWeatherAppApiHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i4.WeatherAppException, T>> ensure<T>(
    _i5.Future<_i2.Response> Function()? futureGenerator, {
    int? delaySeconds = 1,
    int? maxAttempts = 4,
    required T Function(dynamic)? parser,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #ensure,
          [futureGenerator],
          {
            #delaySeconds: delaySeconds,
            #maxAttempts: maxAttempts,
            #parser: parser,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i4.WeatherAppException, T>>.value(
            _FakeEither_1<_i4.WeatherAppException, T>(
          this,
          Invocation.method(
            #ensure,
            [futureGenerator],
            {
              #delaySeconds: delaySeconds,
              #maxAttempts: maxAttempts,
              #parser: parser,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i4.WeatherAppException, T>>);
}

/// A class which mocks [CityWeatherApiRouteData].
///
/// See the documentation for Mockito's code generation for more information.
class MockCityWeatherApiRouteData extends _i1.Mock
    implements _i4.CityWeatherApiRouteData {
  MockCityWeatherApiRouteData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get cityName => (super.noSuchMethod(
        Invocation.getter(#cityName),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#cityName),
        ),
      ) as String);

  @override
  bool get doSaveToCache => (super.noSuchMethod(
        Invocation.getter(#doSaveToCache),
        returnValue: false,
      ) as bool);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  String get baseApiPath => (super.noSuchMethod(
        Invocation.getter(#baseApiPath),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#baseApiPath),
        ),
      ) as String);
}

/// A class which mocks [CurrentWeatherApiRouteData].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrentWeatherApiRouteData extends _i1.Mock
    implements _i4.CurrentWeatherApiRouteData {
  MockCurrentWeatherApiRouteData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get latitude => (super.noSuchMethod(
        Invocation.getter(#latitude),
        returnValue: 0.0,
      ) as double);

  @override
  double get longitude => (super.noSuchMethod(
        Invocation.getter(#longitude),
        returnValue: 0.0,
      ) as double);

  @override
  bool get doSaveToCache => (super.noSuchMethod(
        Invocation.getter(#doSaveToCache),
        returnValue: false,
      ) as bool);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  String get baseApiPath => (super.noSuchMethod(
        Invocation.getter(#baseApiPath),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#baseApiPath),
        ),
      ) as String);
}

/// A class which mocks [WeeklyWeatherApiRouteData].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeeklyWeatherApiRouteData extends _i1.Mock
    implements _i4.WeeklyWeatherApiRouteData {
  MockWeeklyWeatherApiRouteData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.PositionCoordinates get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _FakePositionCoordinates_2(
          this,
          Invocation.getter(#position),
        ),
      ) as _i4.PositionCoordinates);

  @override
  String get baseApiPath => (super.noSuchMethod(
        Invocation.getter(#baseApiPath),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#baseApiPath),
        ),
      ) as String);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);
}
