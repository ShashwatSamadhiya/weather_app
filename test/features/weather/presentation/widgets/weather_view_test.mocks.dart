// Mocks generated by Mockito 5.4.6 from annotations
// in weather_app/test/features/weather/presentation/widgets/weather_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_bloc/flutter_bloc.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/weather_app.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetCurrentWeatherData_0 extends _i1.SmartFake
    implements _i2.GetCurrentWeatherData {
  _FakeGetCurrentWeatherData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWeeklyWeather_1 extends _i1.SmartFake
    implements _i2.GetWeeklyWeather {
  _FakeGetWeeklyWeather_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCityWeather_2 extends _i1.SmartFake
    implements _i2.GetCityWeather {
  _FakeGetCityWeather_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocationService_3 extends _i1.SmartFake
    implements _i2.LocationService {
  _FakeLocationService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherState_4 extends _i1.SmartFake implements _i2.WeatherState {
  _FakeWeatherState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherAppException_5 extends _i1.SmartFake
    implements _i2.WeatherAppException {
  _FakeWeatherAppException_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherAppBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherAppBloc extends _i1.Mock implements _i2.WeatherAppBloc {
  MockWeatherAppBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetCurrentWeatherData get getCurrentWeather => (super.noSuchMethod(
        Invocation.getter(#getCurrentWeather),
        returnValue: _FakeGetCurrentWeatherData_0(
          this,
          Invocation.getter(#getCurrentWeather),
        ),
      ) as _i2.GetCurrentWeatherData);

  @override
  _i2.GetWeeklyWeather get getWeeklyWeather => (super.noSuchMethod(
        Invocation.getter(#getWeeklyWeather),
        returnValue: _FakeGetWeeklyWeather_1(
          this,
          Invocation.getter(#getWeeklyWeather),
        ),
      ) as _i2.GetWeeklyWeather);

  @override
  _i2.GetCityWeather get getWeatherByCity => (super.noSuchMethod(
        Invocation.getter(#getWeatherByCity),
        returnValue: _FakeGetCityWeather_2(
          this,
          Invocation.getter(#getWeatherByCity),
        ),
      ) as _i2.GetCityWeather);

  @override
  _i2.LocationService get locationService => (super.noSuchMethod(
        Invocation.getter(#locationService),
        returnValue: _FakeLocationService_3(
          this,
          Invocation.getter(#locationService),
        ),
      ) as _i2.LocationService);

  @override
  _i2.WeatherState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWeatherState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.WeatherState);

  @override
  _i3.Stream<_i2.WeatherState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.WeatherState>.empty(),
      ) as _i3.Stream<_i2.WeatherState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i2.WeatherAppException getWeatherAppExceptionFromError(
    Object? error, {
    String? defaultMessage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherAppExceptionFromError,
          [error],
          {#defaultMessage: defaultMessage},
        ),
        returnValue: _FakeWeatherAppException_5(
          this,
          Invocation.method(
            #getWeatherAppExceptionFromError,
            [error],
            {#defaultMessage: defaultMessage},
          ),
        ),
      ) as _i2.WeatherAppException);

  @override
  void add(_i2.WeatherEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i2.WeatherEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.WeatherState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i2.WeatherEvent>(
    _i4.EventHandler<E, _i2.WeatherState>? handler, {
    _i4.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i4.Transition<_i2.WeatherEvent, _i2.WeatherState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void onChange(_i4.Change<_i2.WeatherState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
