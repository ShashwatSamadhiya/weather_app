// Mocks generated by Mockito 5.4.6 from annotations
// in weather_app/test/features/weather/presentation/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/weather_app.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherRepository_0 extends _i1.SmartFake
    implements _i2.WeatherRepository {
  _FakeWeatherRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCurrentWeatherData].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentWeatherData extends _i1.Mock
    implements _i2.GetCurrentWeatherData {
  MockGetCurrentWeatherData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeWeatherRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.WeatherRepository);

  @override
  _i4.Future<_i3.Either<_i2.WeatherAppException, _i2.CurrentWeatherData>> call(
          _i2.CurrentWeatherApiRouteData? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<
                _i3
                .Either<_i2.WeatherAppException, _i2.CurrentWeatherData>>.value(
            _FakeEither_1<_i2.WeatherAppException, _i2.CurrentWeatherData>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4
          .Future<_i3.Either<_i2.WeatherAppException, _i2.CurrentWeatherData>>);
}

/// A class which mocks [GetWeeklyWeather].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeeklyWeather extends _i1.Mock implements _i2.GetWeeklyWeather {
  MockGetWeeklyWeather() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeWeatherRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.WeatherRepository);

  @override
  _i4.Future<_i3.Either<_i2.WeatherAppException, _i2.WeeklyWeatherData>> call(
          _i2.WeeklyWeatherApiRouteData? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<
                _i3
                .Either<_i2.WeatherAppException, _i2.WeeklyWeatherData>>.value(
            _FakeEither_1<_i2.WeatherAppException, _i2.WeeklyWeatherData>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4
          .Future<_i3.Either<_i2.WeatherAppException, _i2.WeeklyWeatherData>>);
}

/// A class which mocks [GetCityWeather].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCityWeather extends _i1.Mock implements _i2.GetCityWeather {
  MockGetCityWeather() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeWeatherRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.WeatherRepository);

  @override
  _i4.Future<_i3.Either<_i2.WeatherAppException, _i2.CurrentWeatherData>> call(
          _i2.CityWeatherApiRouteData? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<
                _i3
                .Either<_i2.WeatherAppException, _i2.CurrentWeatherData>>.value(
            _FakeEither_1<_i2.WeatherAppException, _i2.CurrentWeatherData>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4
          .Future<_i3.Either<_i2.WeatherAppException, _i2.CurrentWeatherData>>);
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i2.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.Either<_i2.WeatherAppException, _i2.PositionCoordinates>>
      getCurrentLocation() => (super.noSuchMethod(
            Invocation.method(
              #getCurrentLocation,
              [],
            ),
            returnValue: _i4.Future<
                    _i3.Either<_i2.WeatherAppException,
                        _i2.PositionCoordinates>>.value(
                _FakeEither_1<_i2.WeatherAppException, _i2.PositionCoordinates>(
              this,
              Invocation.method(
                #getCurrentLocation,
                [],
              ),
            )),
          ) as _i4.Future<
              _i3.Either<_i2.WeatherAppException, _i2.PositionCoordinates>>);
}
