// Mocks generated by Mockito 5.4.6 from annotations
// in weather_app/test/features/weather/domain/usecases/current_weather_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/weather_app.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i3.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i3.WeatherAppException, _i3.CurrentWeatherData>>
      getCurrentWeatherData(
              _i3.CurrentWeatherApiRouteData? currentWeatherApiRouteData) =>
          (super.noSuchMethod(
            Invocation.method(
              #getCurrentWeatherData,
              [currentWeatherApiRouteData],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i3.WeatherAppException,
                        _i3.CurrentWeatherData>>.value(
                _FakeEither_0<_i3.WeatherAppException, _i3.CurrentWeatherData>(
              this,
              Invocation.method(
                #getCurrentWeatherData,
                [currentWeatherApiRouteData],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i3.WeatherAppException, _i3.CurrentWeatherData>>);

  @override
  _i4.Future<_i2.Either<_i3.WeatherAppException, _i3.CurrentWeatherData>>
      getCityWeatherData(
              _i3.CityWeatherApiRouteData? cityWeatherApiRouteData) =>
          (super.noSuchMethod(
            Invocation.method(
              #getCityWeatherData,
              [cityWeatherApiRouteData],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i3.WeatherAppException,
                        _i3.CurrentWeatherData>>.value(
                _FakeEither_0<_i3.WeatherAppException, _i3.CurrentWeatherData>(
              this,
              Invocation.method(
                #getCityWeatherData,
                [cityWeatherApiRouteData],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i3.WeatherAppException, _i3.CurrentWeatherData>>);

  @override
  _i4.Future<_i2.Either<_i3.WeatherAppException, _i3.WeeklyWeatherData>>
      getWeeklyWeather(
              _i3.WeeklyWeatherApiRouteData? weeklyWeatherApiRouteData) =>
          (super.noSuchMethod(
            Invocation.method(
              #getWeeklyWeather,
              [weeklyWeatherApiRouteData],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i3.WeatherAppException,
                        _i3.WeeklyWeatherData>>.value(
                _FakeEither_0<_i3.WeatherAppException, _i3.WeeklyWeatherData>(
              this,
              Invocation.method(
                #getWeeklyWeather,
                [weeklyWeatherApiRouteData],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i3.WeatherAppException, _i3.WeeklyWeatherData>>);
}
